  - name: Create a boot disk with the same name as the instance.
    gce_pd: name={{instance_name}} image={{instance_image}} disk_type={{boot_disk_type}} size_gb={{boot_disk_size_gb}} zone={{zone}} mode=READ_WRITE service_account_email={{gce_email}} credentials_file={{gce_credential}} project_id={{gce_project}}
    register: pd_result
    until: pd_result['state'] is defined and pd_result['state'] == "present"
    retries: 5

  - name: Boot up a new instance using the just-created boot disk.
    gce:
      name: "{{instance_name}}"
      # "state: started" was not working as of ansible 2.3.1.0
      state: present
      disks: "{{instance_name}}"
      zone: "{{zone}}"
      machine_type: "{{instance_type if instance_type|trim else omit}}"
      network: "{{network if network|trim else omit}}"
      subnetwork: "{{subnetwork if subnetwork|trim else omit}}"
      service_account_email: "{{gce_email}}"
      credentials_file: "{{gce_credential}}"
      project_id: "{{gce_project}}"
      service_account_permissions: cloud-platform
      tags: "{{loom_tags if loom_tags|trim else omit}}"
      external_ip: "{{external_ip if external_ip|trim else omit}}"
      # ip_forward is required for by docker containers to access the internet
      ip_forward: true
    register: gce_result
    until: gce_result['state'] is defined and gce_result['state'] == "present"
    retries: 5

  - name: Add host IP to new_instances for downstream plays. Use internal or external IP depending on setting.
    add_host: hostname={{ (use_internal_ip) | ternary(item.private_ip, item.public_ip) }} groupname=new_instances
    with_items: '{{ gce_result.instance_data }}'

  - name: Create user and SSH key if they don't exist
    user: name={{ ansible_user_id }} generate_ssh_key=yes ssh_key_bits=2048 ssh_key_file={{ ssh_private_key_path }} ssh_key_type=rsa

  - name: Format SSH key for Google Cloud
    shell: "echo -n {{loom_remote_user}}: | cat - {{ssh_private_key_path}}.pub | cut -f1-2 -d' '"
    args:
      executable: /bin/bash
    register: ssh_key

  - name: Refresh instance inventory data
    meta: refresh_inventory

  - debug:
      msg: "{{hostvars}}"

  - debug:
      msg: "{{dict(hostvars[instance_name]['gce_metadata'], **{'ssh-keys': hostvars[instance_name]['gce_metadata'].get('ssh-keys','')+'\n'+ssh_key.stdout})}}"

  - name: Add ssh key to ssh-keys on instance metadata
    gce:
      name: "{{instance_name}}"
      metadata: "{{dict(hostvars[instance_name]['gce_metadata'], **{'ssh-keys': hostvars[instance_name]['gce_metadata'].get('ssh-keys','')+'\n'+ssh_key.stdout}) | tojson}}"
    register: gce_result
    until: gce_result['state'] is defined
    retries: 5

  - name: Wait for SSH port to be available.
    wait_for: host={{ (use_internal_ip) | ternary(item.private_ip, item.public_ip) }} port=22 delay=10 timeout=300 search_regex=OpenSSH
    with_items: '{{ gce_result.instance_data }}'

  - name: Wait while ssh key propagates to the instance
    pause: seconds=5
