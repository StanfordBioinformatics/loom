- name: Create the data root directory if using local storage
  file:
    path: "{{storage_root}}"
    state: directory
  when: storage_type == "local"

- name: Verify Docker is running
  shell: "docker ps"

- name: Optimize Elasticsearch on Linux host. Ignore error if not root.
  sysctl:
    name: vm.max_map_count
    value: 262144
  become: true
  when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"
  ignore_errors: yes

- name: Create a config file for Elasticsearch
  template:
    src: templates/elasticsearch.yml
    dest: "{{server_settings_home}}/elasticsearch.yml"

- name: Start an Elasticsearch container
  docker_container:
    name: "{{elasticsearch_container_name}}"
    hostname: "{{elasticsearch_container_name}}"
    image: "{{elasticsearch_image}}"
    restart_policy: always
    api_version: auto
    volumes:
      - "{{server_settings_home}}/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
      - "{{elasticsearch_data_volume}}:/usr/share/elasticsearch/data"
    ports: "{{[ elasticsearch_port~':'~elasticsearch_port ]}}"
    capabilities: ['IPC_LOCK']
    ulimits: ['memlock:-1:-1','nofile:65536:65536']
    env:
      ES_JAVA_OPTS: "{{elasticsearch_java_opts}}"
      http.host: "0.0.0.0"
      transport.host: "127.0.0.1"

- name: Create a config file for Kibana
  template:
    src: templates/kibana.yml
    dest: "{{server_settings_home}}/kibana.yml"

- name: Start a Kibana container
  docker_container:
    name: "{{kibana_container_name}}"
    hostname: "{{kibana_container_name}}"
    image: "{{kibana_image}}"
    restart_policy: always
    api_version: auto
    volumes:
      - "{{server_settings_home}}/kibana.yml:/usr/share/kibana/config/kibana.yml"
    env:
      ELASTICSEARCH_URL: "http://{{elasticsearch_container_name}}:{{elasticsearch_port}}"
    links:
      - "{{elasticsearch_container_name}}"

- name: Create a config file for the Fluentd logging server
  template:
    src: templates/fluent.conf
    dest: "{{server_settings_home}}/fluent.conf"

- name: Start a Fluentd logging container
  docker_container:
    name: "{{fluentd_container_name}}"
    hostname: "{{fluentd_container_name}}"
    image: "{{fluentd_image}}"
    restart_policy: always
    api_version: auto
    user: root
    volumes:
      - "{{server_settings_home}}/fluent.conf:/fluentd/etc/fluent.conf"
      - "{{server_settings_home}}/log/:/fluentd/log/"
    ports: "{{[ fluentd_port~':'~fluentd_port ]}}"
    links:
      - "{{elasticsearch_container_name}}"

- name: Start a MySQL database container
  docker_container:
    name: "{{mysql_container_name}}"
    hostname: "{{mysql_container_name}}"
    image: "{{mysql_image}}"
    restart_policy: always
    api_version: auto
    env:
      MYSQL_RANDOM_ROOT_PASSWORD: "{{mysql_random_root_password}}"
      MYSQL_DATABASE: "{{mysql_database}}"
      MYSQL_USER: "{{mysql_user}}"
      MYSQL_PASSWORD: "{{mysql_password}}"
    log_driver: fluentd
    log_options:
      fluentd-address: localhost:{{fluentd_port}}
      fluentd-async-connect: "true"
      tag: "loom.{%raw%}{{.Name}}.{{.ID}}{%endraw%}"
    volumes:
      - "{{mysql_data_volume}}:/var/lib/mysql"
  when: mysql_create_docker_container

- name: Start a rabbitmq container to handle message passing for asynchronous tasks
  docker_container:
    name: "{{rabbitmq_container_name}}"
    hostname: "{{rabbitmq_container_name}}"
    image: "{{rabbitmq_image}}"
    restart_policy: always
    api_version: auto
    env:
      RABBITMQ_USER: "{{rabbitmq_user}}"
      RABBITMQ_PASSWORD: "{{rabbitmq_password}}"
      RABBITMQ_HOST: "{{rabbitmq_host}}"
      RABBITMQ_PORT: "{{rabbitmq_port}}"
      RABBITMQ_VHOST: "{{rabbitmq_vhost}}"
    log_driver: fluentd
    log_options:
      fluentd-address: localhost:{{fluentd_port}}
      fluentd-async-connect: "true"
      tag: "loom.{%raw%}{{.Name}}.{{.ID}}{%endraw%}"
    volumes:
      - "{{rabbitmq_data_volume}}:/var/lib/rabbitmq"

- name: Start a container with celery workers to run asynchronous tasks
  docker_container:
    name: "{{worker_container_name}}"
    image: "{{loom_docker_image}}"
    command: /opt/loom/src/bin/run-worker.sh
    restart_policy: always
    api_version: auto
    env_file: "{{server_settings_home}}/{{server_settings_file}}"
    env:
      C_FORCE_ROOT: "true"
      LOOM_SETTINGS_HOME: "{{container_settings_home}}"
      LOOM_MYSQL_HOST: "{{mysql_host}}"
      LOOM_RABBITMQ_HOST: "{{rabbitmq_container_name}}"
      LOOM_MYSQL_SSL_CA_CERT_PATH: "{{container_mysql_ssl_ca_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_CERT_PATH: "{{container_mysql_ssl_client_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_KEY_PATH: "{{container_mysql_ssl_client_key_path}}"
    volumes: "{{[
      server_settings_home+':'+container_settings_home,
      '/var/run/docker.sock:/var/run/docker.sock',
      storage_root~':'~internal_storage_root if storage_type == 'local']
      | reject('undefined') | list}}"
    links: "{{[mysql_container_name if mysql_create_docker_container else none,\
            rabbitmq_container_name] | reject('none') | list}}"
    log_driver: fluentd
    log_options:
      fluentd-address: localhost:{{fluentd_port}}
      fluentd-async-connect: "true"
      tag: "loom.{%raw%}{{.Name}}.{{.ID}}{%endraw%}"

- name: Start a container with a celery scheduler to run scheduled tasks
  docker_container:
    name: "{{scheduler_container_name}}"
    image: "{{loom_docker_image}}"
    command: /opt/loom/src/bin/run-scheduler.sh
    restart_policy: always
    api_version: auto
    env_file: "{{server_settings_home}}/{{server_settings_file}}"
    env:
      C_FORCE_ROOT: "true"
      LOOM_SETTINGS_HOME: "{{container_settings_home}}"
      LOOM_MYSQL_HOST: "{{mysql_host}}"
      LOOM_RABBITMQ_HOST: "{{rabbitmq_container_name}}"
      LOOM_MYSQL_SSL_CA_CERT_PATH: "{{container_mysql_ssl_ca_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_CERT_PATH: "{{container_mysql_ssl_client_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_KEY_PATH: "{{container_mysql_ssl_client_key_path}}"
    volumes:
      - "{{server_settings_home}}:{{container_settings_home}}"
    links: "{{[mysql_container_name if mysql_create_docker_container else none,\
            rabbitmq_container_name] | reject('none') | list}}"
    log_driver: fluentd
    log_options:
      fluentd-address: localhost:{{fluentd_port}}
      fluentd-async-connect: "true"
      tag: "loom.{%raw%}{{.Name}}.{{.ID}}{%endraw%}"

- name: Start a container running flower to monitor celery workers
  when: debug
  docker_container:
    name: "{{flower_container_name}}"
    hostname: "{{flower_container_name}}"
    image: "{{loom_docker_image}}"
    command: /opt/loom/src/bin/run-flower.sh
    restart_policy: always
    api_version: auto
    env_file: "{{server_settings_home}}/{{server_settings_file}}"
    env:
      C_FORCE_ROOT: "true"
      LOOM_SETTINGS_HOME: "{{container_settings_home}}"
      LOOM_MYSQL_HOST: "{{mysql_host}}"
      LOOM_RABBITMQ_HOST: "{{rabbitmq_container_name}}"
      LOOM_MYSQL_SSL_CA_CERT_PATH: "{{container_mysql_ssl_ca_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_CERT_PATH: "{{container_mysql_ssl_client_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_KEY_PATH: "{{container_mysql_ssl_client_key_path}}"
    volumes:
      - "{{server_settings_home}}:{{container_settings_home}}"
    links: "{{[mysql_container_name if mysql_create_docker_container else none,\
            rabbitmq_container_name] | reject('none') | list}}"

- name: Apply database migrations and check for connection errors
  docker_container:
    name: "{{server_container_name}}-check"
    hostname: "{{server_container_name}}"
    image: "{{loom_docker_image}}"
    command: /opt/loom/src/bin/check-database.sh
    interactive: yes
    detach: no
    cleanup: yes
    api_version: auto
    env_file: "{{server_settings_home}}/{{server_settings_file}}"
    env:
      LOOM_SETTINGS_HOME: "{{container_settings_home}}"
      LOOM_MYSQL_HOST: "{{mysql_host}}"
      LOOM_RABBITMQ_HOST: "{{rabbitmq_container_name}}"
      LOOM_MYSQL_SSL_CA_CERT_PATH: "{{container_mysql_ssl_ca_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_CERT_PATH: "{{container_mysql_ssl_client_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_KEY_PATH: "{{container_mysql_ssl_client_key_path}}"
    volumes:
      - "{{portal_data_volume}}:{{portal_root}}"
      - "{{static_data_volume}}:/{{static_root}}"
      - "{{server_settings_home}}:{{container_settings_home}}"
    links: "{{[mysql_container_name if mysql_create_docker_container else none,\
            rabbitmq_container_name] | reject('none') | list}}"

- name: Start a container with the Loom server
  docker_container:
    name: "{{server_container_name}}"
    hostname: "{{server_container_name}}"
    image: "{{loom_docker_image}}"
    command: /opt/loom/src/bin/run-server.sh
    restart_policy: always
    api_version: auto
    env_file: "{{server_settings_home}}/{{server_settings_file}}"
    env:
      LOOM_SETTINGS_HOME: "{{container_settings_home}}"
      LOOM_MYSQL_HOST: "{{mysql_host}}"
      LOOM_RABBITMQ_HOST: "{{rabbitmq_container_name}}"
      LOOM_MYSQL_SSL_CA_CERT_PATH: "{{container_mysql_ssl_ca_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_CERT_PATH: "{{container_mysql_ssl_client_cert_path}}"
      LOOM_MYSQL_SSL_CLIENT_KEY_PATH: "{{container_mysql_ssl_client_key_path}}"
    volumes:
      - "{{portal_data_volume}}:{{portal_root}}"
      - "{{static_data_volume}}:/{{static_root}}"
      - "{{server_settings_home}}:{{container_settings_home}}"
    links: "{{[mysql_container_name if mysql_create_docker_container else none,\
            rabbitmq_container_name] | reject('none') | list}}"
    log_driver: fluentd
    log_options:
      fluentd-address: localhost:{{fluentd_port}}
      fluentd-async-connect: "true"
      tag: "loom.{%raw%}{{.Name}}.{{.ID}}{%endraw%}"

- name: Create self-signed SSL certificate and key.
  command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout {{server_settings_home}}/{{resource_dir}}/{{ssl_cert_key_file}} -out {{server_settings_home}}/{{resource_dir}}/{{ssl_cert_file}} -subj "{{ssl_cert_subj}}"
  when: "https_port_enabled and ssl_cert_create_new"

- name: Create a config file for the NGINX web server
  template:
    src: templates/nginx.conf
    dest: "{{server_settings_home}}/nginx.conf"

- name: Start an NGINX server container
  docker_container:
    name: "{{nginx_container_name}}"
    image: "{{nginx_image}}"
    restart_policy: always
    api_version: auto
    volumes:
      - "{{server_settings_home}}/nginx.conf:/etc/nginx/conf.d/default.conf"
      - "{{server_settings_home}}/{{resource_dir}}/:{{container_settings_home}}/{{resource_dir}}"
    volumes_from:
      - "{{server_container_name}}"
    links: "{{[server_container_name, kibana_container_name,\
            flower_container_name if debug else none,\
            rabbitmq_container_name if debug else none]\
	    | reject('none') | list}}"
    ports: "{{[ http_port~':'~http_port if \
            (http_port_enabled) else none,\
            https_port~':'~https_port if https_port_enabled else none]
            | reject('none') | list}}"
    log_driver: fluentd
    log_options:
      fluentd-address: localhost:{{fluentd_port}}
      fluentd-async-connect: "true"
      tag: "loom.{%raw%}{{.Name}}.{{.ID}}{%endraw%}"

- name: Wait for Kibana to initialize. (retry messages are normal)
  uri:
    url: http://127.0.0.1:9200/.kibana
  register: response
  until: response.status == 200
  retries: 60
  delay: 10

- name: Set Kibana timestamp field.
  uri:
    url: http://127.0.0.1:9200/.kibana/index-pattern/*
    method: PUT
    body_format: json
    body: '{"title" : "*",  "timeFieldName": "@timestamp"}'
    status_code: 200,201
  register: result
  until: result.status|default(0) == 200 or result.status|default(0) == 201
  retries: 5
  delay: 10

- name: Set Kibana default index.
  uri:
    url: http://127.0.0.1:9200/.kibana/config/{{kibana_version}}
    method: PUT
    body_format: json
    body: '{"defaultIndex" : "*"}'
    status_code: 200,201
